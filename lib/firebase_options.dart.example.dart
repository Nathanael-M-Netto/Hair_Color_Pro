// File generated by FlutterFire CLI.
// ignore_for_file: type=lint
import 'package:firebase_core/firebase_core.dart' show FirebaseOptions;
import 'package:flutter/foundation.dart'
    show defaultTargetPlatform, kIsWeb, TargetPlatform;

/// Default [FirebaseOptions] for use with your Firebase apps.
///
/// Example:
/// ```dart
/// import 'firebase_options.dart';
/// // ...
/// await Firebase.initializeApp(
///   options: DefaultFirebaseOptions.currentPlatform,
/// );
/// ```
///
/// **IMPORTANT:**
/// **This is an example file. Copy this file to `firebase_options.dart`**
/// **and replace the placeholder values with your actual Firebase project configuration.**
/// **The actual `firebase_options.dart` file should be in your .gitignore.**
class DefaultFirebaseOptions {
  static FirebaseOptions get currentPlatform {
    if (kIsWeb) {
      return web;
    }
    switch (defaultTargetPlatform) {
      case TargetPlatform.android:
        return android;
      case TargetPlatform.iOS:
        return ios; // It's good to have a placeholder even if not immediately used
      case TargetPlatform.macOS:
        throw UnsupportedError(
          'DefaultFirebaseOptions have not been configured for macos - '
              'you can reconfigure this by running the FlutterFire CLI again.',
        );
      case TargetPlatform.windows:
        throw UnsupportedError(
          'DefaultFirebaseOptions have not been configured for windows - '
              'you can reconfigure this by running the FlutterFire CLI again.',
        );
      case TargetPlatform.linux:
        throw UnsupportedError(
          'DefaultFirebaseOptions have not been configured for linux - '
              'you can reconfigure this by running the FlutterFire CLI again.',
        );
      default:
        throw UnsupportedError(
          'DefaultFirebaseOptions are not supported for this platform.',
        );
    }
  }

  static const FirebaseOptions web = FirebaseOptions(
    apiKey: 'YOUR_WEB_API_KEY_HERE', // Substitua pela sua chave API para web
    appId: 'YOUR_WEB_APP_ID_HERE', // Ex: 1:205375342353:web:b07166e0699c88dc1d2eb0
    messagingSenderId: 'YOUR_MESSAGING_SENDER_ID_HERE', // Ex: 205375342353
    projectId: 'YOUR_PROJECT_ID_HERE', // Ex: arte-de-colorir-cabelos
    authDomain: 'YOUR_PROJECT_ID_HERE.firebaseapp.com', // Ex: arte-de-colorir-cabelos.firebaseapp.com
    storageBucket: 'YOUR_PROJECT_ID_HERE.appspot.com', // Ex: arte-de-colorir-cabelos.appspot.com
    measurementId: 'YOUR_WEB_MEASUREMENT_ID_HERE', // Ex: G-NYD90SGZHP (Opcional para alguns projetos)
  );

  static const FirebaseOptions android = FirebaseOptions(
    apiKey: 'YOUR_ANDROID_API_KEY_HERE', // Substitua pela sua chave API para Android
    appId: 'YOUR_ANDROID_APP_ID_HERE', // Ex: 1:205375342353:android:cdef1234567890abcdef
    messagingSenderId: 'YOUR_MESSAGING_SENDER_ID_HERE', // Ex: 205375342353
    projectId: 'YOUR_PROJECT_ID_HERE', // Ex: arte-de-colorir-cabelos
    storageBucket: 'YOUR_PROJECT_ID_HERE.appspot.com', // Ex: arte-de-colorir-cabelos.appspot.com
  );

  static const FirebaseOptions ios = FirebaseOptions(
    apiKey: 'YOUR_IOS_API_KEY_HERE', // Substitua pela sua chave API para iOS
    appId: 'YOUR_IOS_APP_ID_HERE', // Ex: 1:205375342353:ios:abcdef1234567890abcdef
    messagingSenderId: 'YOUR_MESSAGING_SENDER_ID_HERE', // Ex: 205375342353
    projectId: 'YOUR_PROJECT_ID_HERE', // Ex: arte-de-colorir-cabelos
    storageBucket: 'YOUR_PROJECT_ID_HERE.appspot.com', // Ex: arte-de-colorir-cabelos.appspot.com
    iosBundleId: 'YOUR_IOS_BUNDLE_ID_HERE', // Ex: com.example.arteDeColorirCabelos
    // iosClientId: 'YOUR_IOS_CLIENT_ID_HERE', // Se estiver usando Google Sign-In no iOS, por exemplo
    // androidClientId: 'YOUR_ANDROID_CLIENT_ID_HERE', // Geralmente não no iOS options, mas às vezes incluído
  );
}
